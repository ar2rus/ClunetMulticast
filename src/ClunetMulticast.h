#ifndef ClunetMulticast_h
#define ClunetMulticast_h

#include <functional>

#include <ESP8266WiFi.h>
#include "ESPAsyncUDP.h"


#define CLUNET_SUPRADIN_ADDRESS 0x00
#define CLUNET_BROADCAST_ADDRESS 0xFF

/************COMMANDS****************/

/* Поиск других устройств, параметров нет */
#define CLUNET_COMMAND_DISCOVERY 0x00

/* Ответ устройств на поиск, в качестве параметра - название устройства (текст) */
#define CLUNET_COMMAND_DISCOVERY_RESPONSE 0x01

/* Работа с загрузчиком. Данные - субкоманда.
	<-0 - загрузчик запущен
	->1 - перейти в режим обновления прошивки
	<-2 - подтверждение перехода, плюс два байта - размер страницы
	->3 запись прошивки, 4 байта - адрес, всё остальное - данные (равные размеру страницы)
	<-4 блок прошивки записан
	->5 выход из режима прошивки 
*/
#define CLUNET_COMMAND_BOOT_CONTROL 0x02

/* Перезагружает устройство в загрузчик. */
#define CLUNET_COMMAND_REBOOT 0x03

/* Посылается устройством после инициализации библиотеки, сообщает об успешной загрузке устройства.
Параметр - содержимое MCU регистра, говорящее о причине перезагрузки. 
*/
#define CLUNET_COMMAND_BOOT_COMPLETED 0x04

/* Запрос системного времени*/
#define CLUNET_COMMAND_TIME 0x08

/* Сообщает текущее дату/время:
    1-байт: год     (0-99)
    2-байт: месяц   (1-12)
    3-байт: день    (1-31)
    4-байт: час     (0-23)
    5-байт: минута    (0-59)
    6-байт: секунда   (0-59)
    7-байт: день недели (1-7)
*/
#define CLUNET_COMMAND_TIME_INFO 0x09

/* Пинг, на эту команду устройство должно ответить следующей командой, возвратив весь буфер */
#define CLUNET_COMMAND_PING 0xFE

/* Ответ на пинг, в данных то, что было прислано в предыдущей команде */
#define CLUNET_COMMAND_PING_REPLY 0xFF

/* Команда переключения канала:
  1-ый байт: режим
    0x00 - по значению
    0x01 - следующий
    0x02 - предыдущий
    0xFF - запрос текущего значения
  2-ой байт: значение канала (только для режима 0)
*/
#define CLUNET_COMMAND_CHANNEL 0x10

/* Сообщение о номере текущего канала:
  1-ый байт: текущий номер канала
*/
#define CLUNET_COMMAND_CHANNEL_INFO 0x11

/* Команда управления громкостью устройства: 
    1-ый байт: режим
      0x00 - проценты
      0x01 - Дб
      0x02 - прибавить
      0x03 - убавить
      0xFF - запрос текущего значения
    2-ой байт: значение уровня громкости(только для режимов 0 и 1)
*/
#define CLUNET_COMMAND_VOLUME 0x15

/* Сообщение о состоянии громкости устройства:
    1-ый байт: значение в процентах
    2-ой байт: значение в Дб
*/
#define CLUNET_COMMAND_VOLUME_INFO 0x16

/* Команда отключения звука устройства:
    1-ый байт: режим
      0 - отключение звука
      1 - переключение (повторный вызов вернет к предыдущему уровню громкости)
*/
#define CLUNET_COMMAND_MUTE 0x17

/* Команда управления эквалайзером:
    1-ый байт: режим
      0x00 - сбросить (отключить) эквалайзер
      0x01 - усиление (gain)
      0x02 - высокие частоты (treble)
      0x03 - низкие частоты (bass)
      0xFF - запрос текущего значения
    2-ой байт: только для режимов 1,2,3 - задает тип изменения величины
      0x00 - сбросить (0 dB)
      0x01 - Дб
      0x02 - прибавить
      0x03 - убавить
    3-ий байт: только для режимов 1,2,3 - задает значение величины
*/
#define CLUNET_COMMAND_EQUALIZER 0x18

/* Сообщение о состоянии уровней эквалайзера:
    1-ый байт: значение усиления (gain), в дБ
    2-ой байт: значение высокие частот (treble), в дБ
    3-ий байт: значение низких частот (bass), в дБ
*/
#define CLUNET_COMMAND_EQUALIZER_INFO 0x19

/*Команда управления FM-приемником
  0xFF, (1байт: 0x00 - общий, 0x01 - поиск)  - запрос состояния
  0x00, (2 байта, ex. 99.9МГц = 9990) - настроить частоту
  0x01, (1 байт номер канала) - переключить на сохраненный канал
  0x02 - переключить на следующий сохраненный канал
  0x03 - переключить на предыдущий сохраненный канал
  
  0x05 - поиск
  
  0x0A, (1 байт: команда; 1 байт: 0/1 - off / on) - выполнить управляющую команду
      00 - standby;
      01 - mute;
      02 - mono;
      03 - hcc;
      04 - snc
  
  0xEA - запрос количества сохраненных каналов
  0xEB, (1 байт номер канала) - запрос частоты сохраненного канала
  0xEC, (0 байт - добавить канал с текущей частотой; 2 байта - добавить канал с указанной частотой)
  0xED, (1 байт: номер канала; 0 байт - текущая частота / 2 байта - указанная частота) - сохранить канал с указанной частотой по указанному номеру
  0xEE, (2 байта: 0xEE; 0xFF) - стереть все сохраненные программы
*/
#define CLUNET_COMMAND_FM 0x1C

/* Сообщение о состоянии FM-приемника*/
#define CLUNET_COMMAND_FM_INFO 0x1D

/* Команда управления включением/выключением устройства:
    1-ый байт: режим
      0x00 - отключение
      0x01 - включение
      0x02 - переключение
      0xFF - запрос состояния
*/
#define CLUNET_COMMAND_POWER 0x1E

/* Сообщает о состоянии (вкл/выкл) устройства:
    1-ый байт:
      0x00 - выкл
      0x01 - вкл
*/
#define CLUNET_COMMAND_POWER_INFO 0x1F

/* Команда управления выключателями/реле:
    1-ый байт: режим
      0x00 - отключение
      0x01 - включение
      0x02 - переключение
      0x03 - одновременное управление всеми выключателями этого устройства
      0xFF - запрос состояния выключателей устройства
    2-ой байт: 
      для режимов 0x00-0x02: дополнительный идентификатор устройства
      для режима 0x03: битовая маска состояний выключателей
      
*/
#define CLUNET_COMMAND_SWITCH 0x20

/* Сообщение о состоянии всех выключателей устройства в виде битовой маски:
      значение бита = 0 - выключатель отключен
      значение бита = 1 - выключатель включен
*/
#define CLUNET_COMMAND_SWITCH_INFO 0x21

/* Команда запроса состояния кнопок*/
#define CLUNET_COMMAND_BUTTON 0x22

/* Сообщает о состоянии кнопки:
  1-ый байт: 
    идентифкатор устройства
  2-ой байт:
    0x00 - кнопка не нажата (для нефиксируемых);
    0x01 - кнопка нажата (для нефиксируемых);
    0x02 - кнопка в положении вкл (для фиксируемых);
    0x03 - кнопка в положении выкл (для фиксируемых);
*/
#define CLUNET_COMMAND_BUTTON_INFO 0x23

/* Команда запроса текущей температуры:
    1-ый байт: режим
      0x00 - все устройства
      0x01 - устройства с типом, описанном во втором байте
      0x02 - то же, что и 0x01, но в байтах 3-10 задается серийный номер запрашиваемого устройства
    2-ой байт:
      для режимов 1-2 - тип устройств
        0 - 1-wire
        1 - dht
        2 - bmp/bme
    3-10 байт:
      только для режима 2 - задается серийный номер опрашиваемого устройства
    
 */
#define CLUNET_COMMAND_TEMPERATURE 0x25

/* Сообщение о температуре:
    1 байт - кол-во N ответивших устройств
    
    N раз:
		2 байт - тип устройства
		  0 - 1-wire
		  1 - DHT
		  2 - BMP/BME
		3-10 байты - серийный номер устройства
		11-12 байты - значение температуры умноженное на 10 //FIX ME
*/
#define CLUNET_COMMAND_TEMPERATURE_INFO 0x26

/* Команда запроса текущей влажности */
#define CLUNET_COMMAND_HUMIDITY 0x27

/* Сообщает об уровне влажности:
	1-2 байты: значение влажности, умноженное на 10 (или 0xFFFF если ошибка)
*/
#define CLUNET_COMMAND_HUMIDITY_INFO 0x28

/* Команда запроса текущего атмосферного давления */
#define CLUNET_COMMAND_PRESSURE 0x29


/* Сообщает об уровне атмосферного давления:
	1-4 байты: значение давления, умноженное на 100 (или 0xFFFFFFFF если ошибка)
*/
#define CLUNET_COMMAND_PRESSURE_INFO 0x2A

/* Команда запроса метеоданных с устройства*/
#define CLUNET_COMMAND_METEO 0x2E

/* Сообщает метеоданные
 *  1 байт - битовая маска наличия/вадидности данных
 *    0 бит - валидность температура факт.
 *    1 бит - валидность влажность факт.
 *    2 бит - валидность давление факт.
 *    3 бит - валидность освещенность факт
 *  2-3 байты - значение температуры * 100 (*С)
 *  4-5 байты - значение влажности * 10 (%)
 *  6-7 байты - значение давления * 10 (мм рт.ст)
 *  8-9 байты - значение освещенности (лк)
 */
#define CLUNET_COMMAND_METEO_INFO 0x2F

/* Команда поиска 1-wire устройств, данные пустые. */
#define CLUNET_COMMAND_ONEWIRE_SEARCH 0x30

/* Сообщает о найденном 1-wire устройстве:
    1 байт - кол-во N найденных устройств   
    N раз:
		2-9 байт - серийный номер уcтройства (в 1-ом байте хранится family ID)
*/
#define CLUNET_COMMAND_ONEWIRE_INFO 0x31

/* Команда запроса напряжения*/
#define CLUNET_COMMAND_VOLTAGE 0x32

/* Сообщает о напряжении на устройстве:
  2 байта - напряжение в Вольтах, умноженное на 100
*/
#define CLUNET_COMMAND_VOLTAGE_INFO 0x33

/* Команда запроса наличия движения*/
#define CLUNET_COMMAND_MOTION 0x40

/* Сообщает о наличии движения в помещении:
  1 байт: 0 - движения нет; 1 - движение есть
*/
#define CLUNET_COMMAND_MOTION_INFO 0x41

/* Команда запроса уровня освещенности: */
#define CLUNET_COMMAND_LIGHT_LEVEL 0x45

/* Сообщает об уровне  освещенности:
  1 байт: 0 - освещение отсутствует; 1 - освещение есть; 2 - значение люксометра
  2 байт (для первого байта = 0/1): процент освещения
  2-3 байт (для первого байта = 2): значение освещенности в люксах (или 0xFFFF если ошибка)
*/
#define CLUNET_COMMAND_LIGHT_LEVEL_INFO 0x46

/* Команда управления вентилятором:
  1 байт: 0 - ручное управление; 0xFF - запрос состояния
*/
#define CLUNET_COMMAND_FAN 0x50

/* Сообщает о текущем состоянии вентилятора*/
#define CLUNET_COMMAND_FAN_INFO 0x51

/* Команда управления подзарядкой устройств:
  1 байт: 	0x00 - отключить зарядку;
			0x01 - включить зарядку
			0xFF - запрос состояния
  2-3 байты: продолжительность зарядки (секунд)
*/
#define CLUNET_COMMAND_CHARGE 0x52

/* Сообщает о текущем состоянии процесса зарядки
  1 байт: 0x00 - выкл; 0x01 - вкл
  2-3 байт: осталось секунд до завершения
*/
#define CLUNET_COMMAND_CHARGE_INFO 0x53

/*Команда запроса состояния дверей*/
#define CLUNET_COMMAND_DOOR 0x55

/* Сообщает о состоянии дверей:
	0 - дверь закрыта;
	>0 - дверь открыта;
*/
#define CLUNET_COMMAND_DOOR_INFO 0x56

/* Команда управления диммером:
*  1 байт - битовая маска каналов (size == 2)
*    0xFF - запрос состояния (size == 1)
*  2 байт - установить уровень диммера
*    0x00 - выкл
*    0x01 - 0xFF - значение уровня диммера
*/
#define CLUNET_COMMAND_DIMMER 0x57

/* Сообщает о состоянии диммера
*  1 байт - число каналов диммера (N)
*  N раз:
*     i*2 + 1 - номер канала
*     i*2 + 2 - текущее значение диммера
*
*/
#define CLUNET_COMMAND_DIMMER_INFO 0x58

/* Команда управления теплым полом:*/
#define CLUNET_COMMAND_HEATFLOOR 0x60

/* Сообщает о состоянии теплого пола*/
#define CLUNET_COMMAND_HEATFLOOR_INFO 0x61

/* Команда управления сервоприводом */
#define CLUNET_COMMAND_SERVO 0x66

/* Сообщает о состоянии сервопривода */
#define CLUNET_COMMAND_SERVO_INFO 0x67

/* Команда управления состоянием произвольного устройства:
  1-ый байт: идентификатор устройства
  2-ой байт: команда для выполнения
    0xFF - запрос стостояния
*/
#define CLUNET_COMMAND_DEVICE_STATE 0x70

/* Сообщает о состоянии произвольного устройства
  1-ый байт: идентификатор устройства
  2-ой байт: состояние устройства
    0x00 - устройство выключено
    0x01 - устройство включено
*/
#define CLUNET_COMMAND_DEVICE_STATE_INFO 0x71

/* Сообщает о нажатии кнопки на ПДУ:
  1-ый байт: формат передачи (0 - nec)
  2-3 байты: код кнопки
*/
#define CLUNET_COMMAND_RC_BUTTON_PRESSED 0x75

/* Эмулирует нажтие кнопки на ПДУ*/
#define CLUNET_COMMAND_RC_BUTTON_SEND 0x76

/* Команда управления ANDROID планшетом с предустановленным приложением
  1-ый байт:
    0x00 - заблокировать
    0x01 - разблокировать
    0x02 - изменить состояние на противоположное
    0x0A - активировать приложение на планшете
*/
#define CLUNET_COMMAND_ANDROID 0xA0

//Используется для отладки
#define CLUNET_COMMAND_DEBUG 0x99

/* Установка таймера. Параметр - кол-во секунд (два байта) */
#define CLUNET_COMMAND_SET_TIMER 0x09

/* Подать звуковой сигнал*/
#define CLUNET_COMMAND_BEEP 0x90


#define CLUNET_BUFFER_SIZE 255

#define CLUNET_OFFSET_SRC_ADDRESS 0
#define CLUNET_OFFSET_DST_ADDRESS 1
#define CLUNET_OFFSET_COMMAND 2
#define CLUNET_OFFSET_SIZE 3
#define CLUNET_OFFSET_DATA 4

typedef struct {
  unsigned char src_address;
  unsigned char dst_address;
  unsigned char command;
  unsigned char size;
  char data[CLUNET_BUFFER_SIZE];
} clunet_message;


const IPAddress CLUNET_MULTICAST_IP(234, 5, 6, 7);

#define CLUNET_MULTICAST_PORT 12345

typedef std::function<void(clunet_message* message)> ClunetMulticastMessageHandlerFunction;

class ClunetMulticast{
  private:
    unsigned char _id;
    String _name;
    
    AsyncUDP _udp;
  public: 
    ClunetMulticast(unsigned char deviceId, String deviceName);

    bool connect();
    void close();
    
    void onMessage(ClunetMulticastMessageHandlerFunction fn);
	
    size_t send(unsigned char address, unsigned char command, char* data, unsigned char size);
    size_t broadcast_send(unsigned char command, char* data, unsigned char size);

    bool connected();
};

#endif
